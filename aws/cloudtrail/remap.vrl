.ocsf.metadata.version = "1.3.0"
.ocsf.metadata.product.vendor_name = "AWS"
.ocsf.metadata.product.name = "CloudTrail"

.ocsf.category_uid = 6
.ocsf.category_name = "Application Activity"

.ocsf.class_uid = 6003
.ocsf.class_name = "API Activity"

.ocsf.api.operation = del(.message.eventName)
.ocsf.api.operation = string(.ocsf.api.operation) ?? "unknown"

if (del(.message.readOnly) == true || starts_with(.ocsf.api.operation, "Describe") || starts_with(.ocsf.api.operation, "List")) {
  .ocsf.activity_id = 3
  .ocsf.activity_name = "Read"
} else if (.ocsf.api.operation == "RunInstances" || starts_with(.ocsf.api.operation, "Create"))  {
  .ocsf.activity_id = 1
  .ocsf.activity_name = "Create"
} else {
  .ocsf.activity_id = 99
  .ocsf.activity_name = .ocsf.api.operation
}
.ocsf.severity_id = 1
.ocsf.severity = "Informational"

.ocsf.type_uid = .ocsf.class_uid * 100 + .ocsf.activity_id
.ocsf.type = join!([.ocsf.class_name, "Other"], separator: ": ")

.ocsf.time_dt = del(.message.eventTime)
.ocsf.time = to_unix_timestamp(parse_timestamp!(.ocsf.time_dt, format: "%+"))

.ocsf.metadata.uid = del(.message.eventID)
.ocsf.metadata.product.feature.name = del(.message.eventCategory)
.ocsf.metadata.product.version = del(.message.eventVersion)
.ocsf.metadata.event_code = del(.message.eventType)
.ocsf.metadata.profiles = ["cloud", "datetime"]

.ocsf.observables = []

.ocsf.api.service.name = del(.message.eventSource)
.ocsf.api.service.name = string(.ocsf.api.service.name) ?? "unknown"

.ocsf.api.request.uid = del(.message.requestID)
.ocsf.api.request.data = del(.message.requestParameters)

.ocsf.cloud.provider = "AWS"
.ocsf.cloud.region = del(.message.awsRegion)

.ocsf.actor.user.account.uid = del(.message.userIdentity.accountId)
.ocsf.actor.user.type = del(.message.userIdentity.type)
.ocsf.actor.user.uid = del(.message.userIdentity.arn)
.ocsf.actor.user.uid_alt = del(.message.userIdentity.principalId)
.ocsf.actor.user.credential_uid = del(.message.userIdentity.accessKeyId)
.ocsf.actor.user.name = del(.message.userIdentity.userName)

if (!is_null(.ocsf.actor.user.uid_alt) && contains(string!(.ocsf.actor.user.uid_alt), "@")) {
    .ocsf.actor.user.email_addr = split(string!(.ocsf.actor.user.uid_alt), ":")[-1]
} else if (!is_null(.ocsf.actor.user.name) && contains(string!(.ocsf.actor.user.name), "@")) {
    .ocsf.actor.user.email_addr = split(string!(.ocsf.actor.user.name), ":")[-1]
}

if ((.ocsf.actor.user.type == "AssumedRole") && (is_null(.ocsf.actor.user.email_addr))) {
  .ocsf.actor.user.type = "System"
  .ocsf.actor.user.type_id = 3
}

if (!is_null(.ocsf.actor.user.email_addr)) {
  observable = {
                  "name": "user",
                  "type": "Email Address",
                  "type_id": 5,
                  "value": .ocsf.actor.user.email_addr
                }
  .ocsf.observables = push(.ocsf.observables, observable)
} else {
  observable = {
                  "name": "user",
                  "type": "User Name",
                  "type_id": 4,
                  "value": .ocsf.actor.user.uid
                }
  .ocsf.observables = push(.ocsf.observables, observable)
}

.ocsf.actor.session.issuer = del(.message.userIdentity.sessionContext.sessionIssuer.arn)
.ocsf.actor.session.created_time_dt = del(.message.userIdentity.sessionContext.attributes.creationDate)

if (.ocsf.actor.session.created_time_dt != null ) {
  .ocsf.actor.session.created_time = to_unix_timestamp(parse_timestamp!(.ocsf.actor.session.created_time_dt, format: "%+"))
}

if (.message.userIdentity.sessionContext.attributes.mfaAuthenticated) != null {
  .ocsf.actor.session.is_mfa = to_bool!(del(.message.userIdentity.sessionContext.attributes.mfaAuthenticated))
}

if (is_ipv4!(.message.sourceIPAddress) || is_ipv6!(.message.sourceIPAddress)) {
  .ocsf.src_endpoint.ip = del(.message.sourceIPAddress)
  observable = {
                 "name": "sourceIPAddress",
                 "type": "IP Address",
                 "type_id": 2,
                 "value": .ocsf.src_endpoint.ip
                }
  .ocsf.observables = push(.ocsf.observables, observable)
} else {
  .ocsf.src_endpoint.domain = del(.message.sourceIPAddress)
}

.ocsf.resources = []
resources = del(.message.resources)
if (is_array(resources)) {
  for_each(array!(resources)) -> |_i, v| {
    rsc = {
            "uid": v.ARN,
            "type": v.type,
            "namespace": .ocsf.api.service.name,
            "owner":{"account": { "uid": v.accountId } }
          }
    .ocsf.resources = push(.ocsf.resources, rsc)
    observable = {
                    "name": v.type,
                    "type": "Resource UID",
                    "type_id": 10,
                    "value": v.ARN
                  }
      .ocsf.observables = push(.ocsf.observables, observable)
  }
}

if (.ocsf.activity_id == 1) {
  tgt = slice(.ocsf.api.operation, 6) ?? ""
  tgtarn = downcase(tgt) + "arn"
  rk = keys(.message.responseElements) ?? []
  rv, _ = get(.message.responseElements, rk)
  rv = object(rv) ?? object({})
  for_each(rv) -> |k, v| {
    dk = downcase(k)
    if (dk == tgtarn) {
      rsc = {
          "uid": v,
          "namespace": .ocsf.api.service.name,
          "type": slice(k, 0, -3) ?? tgt
      }
      .ocsf.resources = push(.ocsf.resources, rsc)
    } else if (dk == "arn") {
      rsc = {
          "uid": v,
          "namespace": .ocsf.api.service.name,
          "type": tgt
      }
      .ocsf.resources = push(.ocsf.resources, rsc)
    }
  }
}

.ocsf.http_request.user_agent = del(.message.userAgent)

svc = .ocsf.api.service.name
op = .ocsf.api.operation

.ocsf.unmapped = encode_json(compact!(.message, string: true, array: true, null: true, nullish: true))
. = compact(.ocsf, string: true, array: true, null: true, nullish: true)
